name: Pipeline Stage

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  validateFrontEnd:
    name: Validate Front End
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: front-end/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Validate Code
        run: npm run validateCode

  buildStatic:
    name: Build Front End Static Files
    if: github.event.pull_request.merged == true
    needs: [ validateFrontEnd, validateBackEnd ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end

    env:
      REACT_APP_API_URL: ${{ secrets.API_URL_STAGE }}
      PUBLIC_URL: .

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: front-end/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Build Static
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./front-end/build

  deployStaticToStage:
    name: Deploy Front End Static Files To Stage
    if: github.event.pull_request.merged == true
    needs: buildStatic
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Deploy to GCS - Stage
        run: gsutil -m rsync -d -r build/ gs://${{ secrets.BUCKET_NAME_ROOT }}-stage/

  validateBackEnd:
    name: Validate Back End
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back-end

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: back-end/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Validate Code
        run: npm run validateCode

  buildPushGcr:
    name: Build And Deploy Back End Image To Stage
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [ validateFrontEnd, validateBackEnd ]
    defaults:
      run:
        working-directory: ./back-end

    env:
      IMAGE_NAME: backend-pipeline
      GAR_LOCATION: europe-central2
      REPOSITORY: backend-pipeline
      SERVICE: backend-pipeline
      REGION: europe-central2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          token_format: access_token

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker Auth
        uses: docker/login-action@v1
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Push Docker Image to GAR
        run: |-
          docker tag ${{ env.IMAGE_NAME }} ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: gcloud run deploy ${{ env.SERVICE }}-stage --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }} --region ${{ env.REGION }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
